From 57c90def4f4aa0c24f7fc6412a69cd6cf95137f7 Mon Sep 17 00:00:00 2001
From: Dom Cobley <popcornmix@gmail.com>
Date: Tue, 21 Nov 2023 19:28:52 +0000
Subject: [PATCH] Revert "staging: bcm2835-audio: Register bcm2835-audio with
 vchiq_bus_type"

This reverts commit 06d0b811883b867b9a6336585b9122fcde20f078.
---
 .../vc04_services/bcm2835-audio/bcm2835.c     | 19 +++++++------
 .../interface/vchiq_arm/vchiq_arm.c           | 28 +++++++++++++++++--
 2 files changed, 35 insertions(+), 12 deletions(-)

--- a/drivers/staging/vc04_services/bcm2835-audio/bcm2835.c
+++ b/drivers/staging/vc04_services/bcm2835-audio/bcm2835.c
@@ -1,12 +1,13 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright 2011 Broadcom Corporation.  All rights reserved. */
 
+#include <linux/platform_device.h>
+
 #include <linux/dma-mapping.h>
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/module.h>
 
-#include "../interface/vchiq_arm/vchiq_bus.h"
 #include "bcm2835.h"
 
 static bool enable_hdmi;
@@ -268,9 +269,9 @@ static int snd_add_child_devices(struct
 	return 0;
 }
 
-static int snd_bcm2835_alsa_probe(struct vchiq_device *device)
+static int snd_bcm2835_alsa_probe(struct platform_device *pdev)
 {
-	struct device *dev = &device->dev;
+	struct device *dev = &pdev->dev;
 	int err;
 
 	err = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));
@@ -298,32 +299,32 @@ static int snd_bcm2835_alsa_probe(struct
 
 #ifdef CONFIG_PM
 
-static int snd_bcm2835_alsa_suspend(struct vchiq_device *device,
+static int snd_bcm2835_alsa_suspend(struct platform_device *pdev,
 				    pm_message_t state)
 {
 	return 0;
 }
 
-static int snd_bcm2835_alsa_resume(struct vchiq_device *device)
+static int snd_bcm2835_alsa_resume(struct platform_device *pdev)
 {
 	return 0;
 }
 
 #endif
 
-static struct vchiq_driver bcm2835_alsa_driver = {
+static struct platform_driver bcm2835_alsa_driver = {
 	.probe = snd_bcm2835_alsa_probe,
 #ifdef CONFIG_PM
 	.suspend = snd_bcm2835_alsa_suspend,
 	.resume = snd_bcm2835_alsa_resume,
 #endif
 	.driver = {
-		.name = "bcm2835-audio",
+		.name = "bcm2835_audio",
 	},
 };
-module_vchiq_driver(bcm2835_alsa_driver);
+module_platform_driver(bcm2835_alsa_driver);
 
 MODULE_AUTHOR("Dom Cobley");
 MODULE_DESCRIPTION("Alsa driver for BCM2835 chip");
 MODULE_LICENSE("GPL");
-MODULE_ALIAS("bcm2835-audio");
+MODULE_ALIAS("platform:bcm2835_audio");
--- a/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c
+++ b/drivers/staging/vc04_services/interface/vchiq_arm/vchiq_arm.c
@@ -63,12 +63,12 @@
 DEFINE_SPINLOCK(msg_queue_spinlock);
 struct vchiq_state g_state;
 
+static struct platform_device *bcm2835_audio;
 /*
  * The devices implemented in the VCHIQ firmware are not discoverable,
  * so we need to maintain a list of them in order to register them with
  * the interface.
  */
-static struct vchiq_device *bcm2835_audio;
 static struct vchiq_device *bcm2835_camera;
 
 struct vchiq_drvdata {
@@ -1712,6 +1712,28 @@ static const struct of_device_id vchiq_o
 };
 MODULE_DEVICE_TABLE(of, vchiq_of_match);
 
+static struct platform_device *
+vchiq_register_child(struct platform_device *pdev, const char *name)
+{
+	struct platform_device_info pdevinfo;
+	struct platform_device *child;
+
+	memset(&pdevinfo, 0, sizeof(pdevinfo));
+
+	pdevinfo.parent = &pdev->dev;
+	pdevinfo.name = name;
+	pdevinfo.id = PLATFORM_DEVID_NONE;
+	pdevinfo.dma_mask = DMA_BIT_MASK(32);
+
+	child = platform_device_register_full(&pdevinfo);
+	if (IS_ERR(child)) {
+		dev_warn(&pdev->dev, "%s not registered\n", name);
+		child = NULL;
+	}
+
+	return child;
+}
+
 static int vchiq_probe(struct platform_device *pdev)
 {
 	struct device_node *fw_node;
@@ -1757,7 +1779,7 @@ static int vchiq_probe(struct platform_d
 		goto error_exit;
 	}
 
-	bcm2835_audio = vchiq_device_register(&pdev->dev, "bcm2835-audio");
+	bcm2835_audio = vchiq_register_child(pdev, "bcm2835_audio");
 	bcm2835_camera = vchiq_device_register(&pdev->dev, "bcm2835-camera");
 
 	return 0;
@@ -1770,7 +1792,7 @@ error_exit:
 
 static void vchiq_remove(struct platform_device *pdev)
 {
-	vchiq_device_unregister(bcm2835_audio);
+	platform_device_unregister(bcm2835_audio);
 	vchiq_device_unregister(bcm2835_camera);
 	vchiq_debugfs_deinit();
 	vchiq_deregister_chrdev();
